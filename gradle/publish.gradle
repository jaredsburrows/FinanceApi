/**
 * Create jar of the sources of library.
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

/**
 * Create javadoc jar of Java documentation.
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

/**
 * Create compiled jar of library.
 */
task mainJar(type: Jar) {
    from sourceSets.main.output
}

/**
 * Create jar of all tests.
 */
task testsJar(type: Jar) {
    classifier = "tests"
    from sourceSets.test.output
}

/**
 * Create a zip of all reports.
 */
task reportsZip(type: Zip, dependsOn: check) {
    classifier = "reports"
    from reporting.baseDir
}

def pomConfig = {
    resolveStrategy = Closure.DELEGATE_FIRST
    name project.name
    description project.description
    url "https://github.com/jaredsburrows/finance-api"

    issueManagement {
        system "github"
        url "https://github.com/jaredsburrows/finance-api/issues"
    }

    scm {
        url "https://github.com/jaredsburrows/finance-api"
        connection "scm:https://jaredsburrows@github.com/jaredsburrows/finance-api"
        developerConnection "scm:git@github.com:jaredsburrows/finance-api.git"
    }

    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "jaredsburrows"
            name "Jared Burrows"
            email "jaredsburrows@gmail.com"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact mainJar
            artifact sourcesJar
            artifact javadocJar
            artifact testsJar
            artifact reportsZip

            // Fix for "from components.java" - bug forces all dependencies to be "runtime"
            pom {
                withXml {
                    def root = asNode()

                    // List dependencies
                    def dependenciesNode = root.appendNode("dependencies")
                    configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", it.group)
                        dependencyNode.appendNode("artifactId", it.name)
                        dependencyNode.appendNode("version", it.version)
                    }

                    // Add parent pom information
                    root.children().last() + pomConfig
                }
            }
        }
    }
}
publish.dependsOn jar, sourcesJar, javadocJar, testsJar, reportsZip
publish.dependsOn "generatePomFileForMavenPublication"

bintray {
    user = project.hasProperty("bintrayUsername") ? project.property("bintrayUsername") : ""
    key = project.hasProperty("bintrayApiKey") ? project.property("bintrayApiKey") : ""
    publications = ["maven"]
    publish = true
    pkg {
        repo = "maven"
        name = project.name
        desc = project.description
        websiteUrl = "https://github.com/jaredsburrows/finance-api"
        issueTrackerUrl = "https://github.com/jaredsburrows/finance-api/issues"
        vcsUrl = "https://github.com/jaredsburrows/finance-api.git"
        licenses = ["Apache-2.0"]
        labels = ["burrows", "apps", "finance", "api"]
        version {
            name = project.version
            desc = project.description
            mavenCentralSync {
                sync = false
                user = project.hasProperty("sonatypeUsername") ? project.property("sonatypeUsername") : ""
                password = project.hasProperty("sonatypeUsername") ? project.property("sonatypePassword") : ""
                close = "1"
            }
        }
    }
}
bintrayUpload.dependsOn jar, sourcesJar, javadocJar, testsJar, reportsZip
bintrayUpload.dependsOn "generatePomFileForMavenPublication"
