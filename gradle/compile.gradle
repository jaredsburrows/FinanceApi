tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Xlint:-processing"    // Turn off warning about not claiming annotations
        compilerArgs << "-Werror"               // Turn warnings into errors
        compilerArgs << "-Xdiags:verbose"       // Turn on verbose errors
        encoding = "utf-8"
        incremental = true
    }
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Xlint:-processing"    // Turn off warning about not claiming annotations
        compilerArgs << "-Werror"               // Turn warnings into errors
        compilerArgs << "-Xdiags:verbose"       // Turn on verbose errors
        encoding = "utf-8"
        incremental = true
    }

    configure(groovyOptions) {
        encoding = "utf-8"
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
        events = ["failed", "skipped"]
    }
}

tasks.withType(JavaForkOptions) {
    // Prevent forked processes from stealing focus (on MacOS at least)
    jvmArgs "-Djava.awt.headless=true"
}

tasks.withType(Javadoc) {
    title = "${project.name} ${project.version} API"
    configure(options) {
        header = project.name
        encoding "UTF-8"
        docEncoding "UTF-8"
        charSet "UTF-8"
        linkSource true
        author = true
        links(["http://docs.oracle.com/javase/8/docs/api/",
               "http://docs.oracle.com/javaee/7/api/"] as String[])
        exclude "**/*Test.java"
        if (JavaVersion.current().isJava8Compatible()) {
            addStringOption("Xdoclint:none", "-quiet")
        }
    }
}
