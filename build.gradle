apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    }
}

repositories {
    jcenter()
}

description = 'Burrows Applications Finance API'
version = '0.0.1'

dependencies {
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configure(options) {
        compilerArgs << '-Xlint:all' << '-Xlint:-options'
        deprecation = true
        encoding = 'UTF-8'
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
    }
}

tasks.withType(Javadoc) {
    title = "${project.name} ${project.version} API"
    configure(options) {
        header = project.name
        encoding 'UTF-8'
        docEncoding 'UTF-8'
        charSet 'UTF-8'
        linkSource true
        author = true
        links(['http://docs.oracle.com/javase/8/docs/api/',
               'http://docs.oracle.com/javaee/7/api/'] as String[])
        exclude '**/*Test.java'
        if (JavaVersion.current().isJava8Compatible()) {
            addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

jacocoTestReport {
    reports {
        xml {
            enabled = true // coveralls plugin depends on xml format report
        }

        html {
            enabled = true
        }
    }
}

def hasBintrayProperties() {
    return project.hasProperty('bintrayUsername') && project.hasProperty('bintrayApiKey')
}

def hasSonatypeProperties() {
    return project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
}

def hasReleaseProperties() {
    return hasBintrayProperties() && hasSonatypeProperties()
}

task allJavadoc(type: Javadoc) {
    source subprojects.collect { project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task testsJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

task reportsZip(type: Zip) {
    dependsOn check
    classifier = 'reports'
    from reporting.baseDir
}

if (hasReleaseProperties()) {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    bintrayUpload.dependsOn jar, sourcesJar, javadocJar, testsJar, reportsZip
    bintrayUpload.dependsOn("generatePomFileForMavenPublication")

    publish.dependsOn jar, sourcesJar, javadocJar, testsJar, reportsZip
    publish.dependsOn("generatePomFileForMavenPublication")

    def pomConfig = {
        name project.name
        packaging 'jar'
        description project.description
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'jaredsburrows'
                name 'Jared Burrows'
                email 'jaredsburrows@gmail.com'
            }
        }
        scm {
            connection 'scm:https://jaredsburrows@github.com/jaredsburrows/FinanceApi'
            developerConnection 'scm:git@github.com:jaredsburrows/FinanceApi.git'
            url 'https://github.com/jaredsburrows/FinanceApi'
        }
    }


    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                artifact testsJar
                artifact reportsZip

                pom.withXml {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = bintrayUsername
        key = bintrayApiKey
        publications = ['maven'] // maven, mavenJava
        publish = true
        pkg {
            repo = 'maven'
            name = project.name
            desc = project.description
            websiteUrl = 'https://github.com/jaredsburrows/FinanceApi'
            issueTrackerUrl = 'https://github.com/jaredsburrows/FinanceApi/issues'
            vcsUrl = 'https://github.com/jaredsburrows/FinanceApi.git'
            licenses = ['Apache-2.0']
            labels = ['Burrows', 'Applications', 'Finance', 'API']
            publicDownloadNumbers = true
            //noinspection GroovyAssignabilityCheck
            version {
                name = project.version
                desc = project.description
//                    gpg {
//                        sign = true //Determines whether to GPG sign the files.
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                    }
                mavenCentralSync {
                    sync = false
                    user = sonatypeUsername
                    password = sonatypePassword
                    close = '1'
                }
            }
        }
    }
}
